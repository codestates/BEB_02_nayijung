{"ast":null,"code":"var _jsxFileName = \"/Users/coup/Desktop/BEB_02/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport erc721Abi from \"./erc721Abi\";\nimport TokenList from \"./components/TokenList\";\nimport { useState, useEffect } from 'react';\nimport Web3 from 'web3';\nimport './App.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [web3, setWeb3] = useState();\n  const [account, setAccount] = useState('');\n  const [newErc721Addr, setNewErc721Addr] = useState();\n  const [erc721list, setErc721list] = useState([]);\n\n  const addNewErc721Token = async () => {\n    const tokenContract = await new web3.eth.Contract(erc721Abi, newErc721Addr, {\n      from: account\n    });\n    const name = await tokenContract.methods.name().call();\n    const symbol = await tokenContract.methods.symbol().call();\n    const totalSupply = await tokenContract.methods.totalSupply().call();\n    let arr = [];\n\n    for (let i = 1; i <= totalSupply; i++) {\n      arr.push(i);\n    }\n\n    for (let tokenId of arr) {\n      let tokenOwner = await tokenContract.methods.ownerOf(tokenId).call();\n\n      if (String(tokenOwner).toLowerCase() === account) {\n        let tokenURI = await tokenContract.methods.tokenURI(tokenId).call();\n        setErc721list(prevState => {\n          return [...prevState, {\n            name,\n            symbol,\n            tokenId,\n            tokenURI\n          }];\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (typeof window.ethereum !== \"undefined\") {\n      try {\n        const web = new Web3(window.ethereum);\n        setWeb3(web);\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  }, []); //empty array runs only on first render.\n\n  const connectWallet = async () => {\n    var accounts = await window.ethereum.request({\n      method: 'eth_requestAccounts'\n    });\n    setAccount(accounts[0]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"metaConnect\",\n      onClick: () => {\n        connectWallet();\n      },\n      children: \"connect to Metamask\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"userInfo\",\n      children: [\"\\uC8FC\\uC18C: \", account]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"newErc721\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: e => {\n          setNewErc721Addr(e.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addNewErc721Token,\n        children: \"add new erc721\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TokenList, {\n      web3: web3,\n      account: account,\n      erc721list: erc721list,\n      contractAddress: newErc721Addr\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"CqUDgHfMFvjyKNisX5DPj0flxQc=\");\n\n_c = App;\n\n/*#__PURE__*/\n_jsxDEV(\"style\", {\n  children: \".button\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 85,\n  columnNumber: 1\n}, this);\n\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/coup/Desktop/BEB_02/src/App.js"],"names":["erc721Abi","TokenList","useState","useEffect","Web3","App","web3","setWeb3","account","setAccount","newErc721Addr","setNewErc721Addr","erc721list","setErc721list","addNewErc721Token","tokenContract","eth","Contract","from","name","methods","call","symbol","totalSupply","arr","i","push","tokenId","tokenOwner","ownerOf","String","toLowerCase","tokenURI","prevState","window","ethereum","web","err","console","log","connectWallet","accounts","request","method","e","target","value"],"mappings":";;;AAAA,OAAO,WAAP;AACA,OAAOA,SAAP,MAAsB,aAAtB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,SAAQC,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAO,YAAP;;;AAEA,SAASC,GAAT,GAAc;AAAA;;AACZ,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,EAAhC;AACA,QAAM,CAACM,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACQ,aAAD,EAAgBC,gBAAhB,IAAoCT,QAAQ,EAAlD;AACA,QAAM,CAACU,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,CAAC,EAAD,CAA5C;;AAEA,QAAMY,iBAAiB,GAAG,YAAY;AACpC,UAAMC,aAAa,GAAG,MAAM,IAAIT,IAAI,CAACU,GAAL,CAASC,QAAb,CAC1BjB,SAD0B,EAE1BU,aAF0B,EAG1B;AAACQ,MAAAA,IAAI,EAACV;AAAN,KAH0B,CAA5B;AAMA,UAAMW,IAAI,GAAG,MAAMJ,aAAa,CAACK,OAAd,CAAsBD,IAAtB,GAA6BE,IAA7B,EAAnB;AACA,UAAMC,MAAM,GAAG,MAAMP,aAAa,CAACK,OAAd,CAAsBE,MAAtB,GAA+BD,IAA/B,EAArB;AACA,UAAME,WAAW,GAAG,MAAMR,aAAa,CAACK,OAAd,CAAsBG,WAAtB,GAAoCF,IAApC,EAA1B;AAEA,QAAIG,GAAG,GAAG,EAAV;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIF,WAArB,EAAkCE,CAAC,EAAnC,EAAsC;AACpCD,MAAAA,GAAG,CAACE,IAAJ,CAASD,CAAT;AACD;;AAED,SAAK,IAAIE,OAAT,IAAoBH,GAApB,EAAwB;AACtB,UAAII,UAAU,GAAG,MAAMb,aAAa,CAACK,OAAd,CAAsBS,OAAtB,CAA8BF,OAA9B,EAAuCN,IAAvC,EAAvB;;AAEA,UAAIS,MAAM,CAACF,UAAD,CAAN,CAAmBG,WAAnB,OAAsCvB,OAA1C,EAAkD;AAChD,YAAIwB,QAAQ,GAAG,MAAMjB,aAAa,CAACK,OAAd,CAAsBY,QAAtB,CAA+BL,OAA/B,EAAwCN,IAAxC,EAArB;AACAR,QAAAA,aAAa,CAAEoB,SAAD,IAAe;AAC3B,iBAAO,CAAC,GAAGA,SAAJ,EAAe;AAACd,YAAAA,IAAD;AAAOG,YAAAA,MAAP;AAAeK,YAAAA,OAAf;AAAwBK,YAAAA;AAAxB,WAAf,CAAP;AACD,SAFY,CAAb;AAGD;AAEF;AACF,GA3BD;;AA6BA7B,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,OAAO+B,MAAM,CAACC,QAAd,KAA4B,WAAhC,EAA6C;AAC3C,UAAI;AACF,cAAMC,GAAG,GAAG,IAAIhC,IAAJ,CAAS8B,MAAM,CAACC,QAAhB,CAAZ;AACA5B,QAAAA,OAAO,CAAC6B,GAAD,CAAP;AACD,OAHD,CAGE,OAAOC,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;AACF;AACF,GATQ,EASN,EATM,CAAT,CAnCY,CA6CZ;;AAEA,QAAMG,aAAa,GAAG,YAAW;AAC/B,QAAIC,QAAQ,GAAG,MAAMP,MAAM,CAACC,QAAP,CAAgBO,OAAhB,CAAwB;AAC3CC,MAAAA,MAAM,EAAE;AADmC,KAAxB,CAArB;AAIAlC,IAAAA,UAAU,CAACgC,QAAQ,CAAC,CAAD,CAAT,CAAV;AACD,GAND;;AAQA,sBACE;AAAK,IAAA,SAAS,EAAG,KAAjB;AAAA,4BACE;AACE,MAAA,SAAS,EAAC,aADZ;AAEE,MAAA,OAAO,EAAE,MAAM;AACbD,QAAAA,aAAa;AACd,OAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eASE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,mCAA+BhC,OAA/B;AAAA;AAAA;AAAA;AAAA;AAAA,YATF,eAWE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,QAAQ,EAAGoC,CAAD,IAAO;AAACjC,UAAAA,gBAAgB,CAACiC,CAAC,CAACC,MAAF,CAASC,KAAV,CAAhB;AAAkC;AAAvE;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAQ,QAAA,OAAO,EAAEhC,iBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAXF,eAgBE,QAAC,SAAD;AAAW,MAAA,IAAI,EAAER,IAAjB;AAAuB,MAAA,OAAO,EAAEE,OAAhC;AAAyC,MAAA,UAAU,EAAEI,UAArD;AAAiE,MAAA,eAAe,EAAEF;AAAlF;AAAA;AAAA;AAAA;AAAA,YAhBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD;;GA5EQL,G;;KAAAA,G;;AA6ET;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMA,eAAeA,GAAf","sourcesContent":["import './App.css';\nimport erc721Abi from \"./erc721Abi\";\nimport TokenList from \"./components/TokenList\";\nimport {useState, useEffect} from 'react';\nimport Web3 from 'web3';\nimport './App.scss';\n\nfunction App(){\n  const [web3, setWeb3] = useState();\n  const [account, setAccount] = useState('');\n  const [newErc721Addr, setNewErc721Addr] = useState();\n  const [erc721list, setErc721list] = useState([]);\n\n  const addNewErc721Token = async () => {\n    const tokenContract = await new web3.eth.Contract(\n      erc721Abi,\n      newErc721Addr,\n      {from:account}\n    );\n\n    const name = await tokenContract.methods.name().call();\n    const symbol = await tokenContract.methods.symbol().call();\n    const totalSupply = await tokenContract.methods.totalSupply().call();\n\n    let arr = [];\n    for (let i = 1; i <= totalSupply; i++){\n      arr.push(i);\n    }\n\n    for (let tokenId of arr){\n      let tokenOwner = await tokenContract.methods.ownerOf(tokenId).call();\n\n      if (String(tokenOwner).toLowerCase() ===  account){\n        let tokenURI = await tokenContract.methods.tokenURI(tokenId).call();\n        setErc721list((prevState) => {\n          return [...prevState, {name, symbol, tokenId, tokenURI}];\n        });\n      }\n\n    }\n  }\n\n  useEffect(() => {\n    if (typeof(window.ethereum) !== \"undefined\") {\n      try {\n        const web = new Web3(window.ethereum);\n        setWeb3(web);\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  }, []);\n  //empty array runs only on first render.\n\n  const connectWallet = async() => {\n    var accounts = await window.ethereum.request({\n      method: 'eth_requestAccounts'\n    });\n\n    setAccount(accounts[0]);\n  }\n\n  return (\n    <div className = \"App\">\n      <button\n        className='metaConnect'\n        onClick={() => {\n          connectWallet();\n        }}\n      >\n        connect to Metamask\n      </button>\n      <div className=\"userInfo\">주소: {account}</div>\n\n      <div className=\"newErc721\">\n        <input type=\"text\" onChange={(e) => {setNewErc721Addr(e.target.value);}}></input>\n        <button onClick={addNewErc721Token}>add new erc721</button>\n      </div>\n      \n      <TokenList web3={web3} account={account} erc721list={erc721list} contractAddress={newErc721Addr} />\n\n    </div>\n  );\n}\n<style>\n  .button{\n    \n  }\n</style>\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}