[{"/Users/coup/Desktop/BEB_02/src/index.js":"1","/Users/coup/Desktop/BEB_02/src/App.js":"2","/Users/coup/Desktop/BEB_02/src/erc721Abi.js":"3","/Users/coup/Desktop/BEB_02/src/components/TokenList.js":"4","/Users/coup/Desktop/BEB_02/src/components/Erc721.js":"5"},{"size":218,"mtime":1645095064403,"results":"6","hashOfConfig":"7"},{"size":2265,"mtime":1645095683464,"results":"8","hashOfConfig":"7"},{"size":7421,"mtime":1645092584079,"results":"9","hashOfConfig":"7"},{"size":307,"mtime":1645092584079,"results":"10","hashOfConfig":"7"},{"size":2161,"mtime":1645092584079,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"okrnwr",{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"14"},"/Users/coup/Desktop/BEB_02/src/index.js",[],["24","25"],"/Users/coup/Desktop/BEB_02/src/App.js",[],"/Users/coup/Desktop/BEB_02/src/erc721Abi.js",[],"/Users/coup/Desktop/BEB_02/src/components/TokenList.js",[],"/Users/coup/Desktop/BEB_02/src/components/Erc721.js",["26"],"import erc721Abi from \"../erc721Abi\";\nimport {useState} from 'react';\n\nfunction Erc721({ web3, account, erc721list, contractAddress }) {\n    const [to, setTo] = useState(\"\");\n\tconsole.log(account);\n    console.log(web3);\n    \n    \n    const sendToken = async function(tokenAddr, tokenId) {\n\n      const tokenContract = await new web3.eth.Contract(\n          erc721Abi,\n          tokenAddr,\n          {\n              from: account,\n          }\n      );\n      tokenContract.methods\n          .transferFrom(account, to, tokenId)\n          .send({\n              from: account,\n          })\n          .on(\"receipt\", (receipt) => {\n              setTo(\"\");\n          });\n    };\n\n    return (\n        <div className=\"erc721list\">\n            {erc721list.map((token) => {\n                return (\n                    <div className=\"erc721token\" key={token.tokenId}>\n                        Name: <span className=\"name\">{token.name}</span>(\n                        <span className=\"symbol\">{token.symbol}</span>)\n                        <div className=\"nft\">id: {token.tokenId}</div>\n                        <img src={token.tokenURI} width={300} />\n                        \n                                        <div className=\"tokenTransfer\">\n                            To:{\" \"}\n                            <input\n                                type=\"text\"\n                                value={to}\n                                onChange={(e) => {\n                                    setTo(e.target.value);\n                                }}\n                            ></input>\n                            <button\n                                className=\"sendErc20Btn\"\n                                onClick={sendToken.bind(\n                                    this,\n                                    contractAddress,\n                                    token.tokenId\n                                )}\n                            >\n                                send Token\n                            </button>\n                        </div>\n                    </div>\n                );\n            })}\n        </div>\n    );\n}\n\nexport default Erc721;",{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":37,"column":25,"nodeType":"33","endLine":37,"endColumn":65},"no-native-reassign",["34"],"no-negated-in-lhs",["35"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]